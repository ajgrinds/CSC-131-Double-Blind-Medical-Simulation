// ../../.vendia-client/index.ts
import debug from "debug";

// ../../.vendia-client/create-core-client.ts
import { GraphQLClient } from "graphql-request";
var createCoreClient = (options, {
  _logger,
  _onAuthStateChange
}) => {
  const { apiKey, getCredentials, onError, retries = 3 } = options;
  if (typeof retries !== "number") {
    throw new Error("retries must a be a number");
  }
  if (onError && typeof onError !== "function") {
    throw new Error("onError must be a function");
  }
  const _errorHandler = onError;
  _logger("Initializing @vendia/client...");
  _logger(`'apiKey' was ${apiKey ? "" : "NOT "}provided.`);
  const _createGraphQLClient = () => {
    let sdkHeader = "";
    try {
      sdkHeader = `@vendia/client@${"0.8.4"}`;
    } catch (e) {
      sdkHeader = `@vendia/client@unknown`;
    }
    const opts = {
      headers: {
        "Content-Type": "application/json",
        "x-vendia-sdk": sdkHeader
      }
    };
    if (options.apiKey) {
      opts.headers["x-api-key"] = options.apiKey;
      opts.headers["Authorization"] = options.apiKey;
    }
    if (options.fetch) {
      opts.fetch = options.fetch;
    }
    return new GraphQLClient(options.apiUrl, opts);
  };
  function getRetryDelay(attempt) {
    return Math.min(Math.pow(2, attempt) * 1e3, 30 * 1e3);
  }
  const _requestWrapper = async (action, operationName, attempt = 0) => {
    var _a;
    try {
      const startTime = Date.now();
      const requestHeaders = {};
      if (typeof getCredentials === "function") {
        const credentials = await getCredentials();
        if (credentials == null ? void 0 : credentials.token) {
          requestHeaders["Authorization"] = `Bearer ${credentials.token}`;
        }
        if (credentials.apiKey) {
          requestHeaders["x-api-key"] = credentials.apiKey;
          requestHeaders["Authorization"] = credentials.apiKey;
        }
        _logger(`${operationName} getCredentials duration (ms)`, Date.now() - startTime);
      }
      const result = await action(requestHeaders);
      _logger(`${operationName} request duration (ms)`, Date.now() - startTime);
      return result;
    } catch (error) {
      _logger("Request error, status:", (_a = error == null ? void 0 : error.response) == null ? void 0 : _a.status);
      if (attempt < retries) {
        const delay = getRetryDelay(attempt);
        _logger(`Retrying ${operationName} (attempt #${attempt + 1}, ${delay}ms delay)`);
        await new Promise((resolve) => setTimeout(resolve, delay));
        return _requestWrapper(action, operationName, attempt + 1);
      }
      if (_errorHandler) {
        _logger(`Passing error to user-provided error handler`);
        _errorHandler(error);
      }
      return Promise.reject(error);
    }
  };
  const _gqlClient = _createGraphQLClient();
  const request = (document, variables, requestHeaders) => {
    return _requestWrapper((additionalHeaders) => {
      const mergedHeaders = { ...requestHeaders, ...additionalHeaders };
      return _gqlClient.request(document, variables, mergedHeaders);
    }, "request");
  };
  return {
    _gqlClient,
    _requestWrapper,
    request
  };
};

// ../../.vendia-client/create-subscription-client.ts
import { createClient } from "graphql-ws";
import { v4 as uuid4 } from "@lukeed/uuid";
import WebSocket from "isomorphic-ws";
import { print } from "graphql";
var createSubscriptionClient = function(options, {
  _logger,
  _onAuthStateChange
}) {
  const { apiKey, getCredentials, onError } = options;
  let subscriptionClient;
  const _createSubscriptionClient = () => {
    var _a;
    _logger("Creating subscription client...");
    let websocketUrl = (_a = options.websocketUrl) != null ? _a : "";
    if (websocketUrl.endsWith("/")) {
      websocketUrl = websocketUrl.slice(0, -1);
    }
    const subClientOptions = {
      url: websocketUrl,
      webSocketImpl: WebSocket
    };
    if (typeof getCredentials === "function") {
      subClientOptions.connectionParams = async () => {
        const credentials = await getCredentials();
        return {
          ...credentials
        };
      };
    } else if (apiKey) {
      subClientOptions.connectionParams = { apiKey };
    }
    const subClient = createClient(subClientOptions);
    subClient.on("connecting", () => _logger("subscriptionClient connecting..."));
    subClient.on("connected", () => _logger("subscriptionClient connected!"));
    subClient.on("closed", () => _logger("subscriptionClient ---disconnected!!!---"));
    return subClient;
  };
  const connectedUnsubscribeMap = /* @__PURE__ */ new Map();
  const _subscribe = ({ query, variables }, handler) => {
    const queryAsString = print(query);
    _logger(`subscriptionClient creating subscription ${queryAsString}`);
    if (options.websocketUrl === void 0) {
      throw new Error("Please initialize @vendia/client with the websocketUrl option in order to use subscriptions.");
    }
    if (subscriptionClient === void 0) {
      subscriptionClient = _createSubscriptionClient();
    }
    const unsubscribe = subscriptionClient.subscribe(
      { query: queryAsString, variables },
      {
        next: handler,
        error: (error) => {
          _logger("subscriptionClient error:", JSON.stringify(error, null, 2));
          if (typeof onError === "function") {
            onError(error);
          }
        },
        complete: () => {
          _logger("subscriptionClient complete fired");
        }
      }
    );
    const observableId = uuid4();
    connectedUnsubscribeMap.set(observableId, unsubscribe);
    return createUnsubscribeWrapperFunc(observableId);
  };
  const createUnsubscribeWrapperFunc = (observableId) => {
    return () => {
      const unsubFunc = connectedUnsubscribeMap.get(observableId);
      if (unsubFunc) {
        _logger("Unsubscribing.");
        unsubFunc();
        return;
      }
      _logger(
        "Tried to unsubscribe, but subscription does not exist. This probably means unsubscribe has already been called for this subscription."
      );
    };
  };
  return {
    _subscribe
  };
};

// ../../.vendia-client/generated.ts
import gql from "graphql-tag";
var Vendia_Block_Result_FragmentFragmentDoc = gql`
    fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {
  error
  result {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
var Vendia_File_Result_FragmentFragmentDoc = gql`
    fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {
  error
  result {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
var Vendia_Folder_Result_FragmentFragmentDoc = gql`
    fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {
  error
  result {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
var _blocks__getDocument = gql`
    query _blocks__get($id: ID!) {
  getVendia_Block(id: $id) {
    _id
    blockSchemaVersion
    blockId
    redactedBlockHash
    previousBlockId
    previousRedactedBlockHash
    blockHash
    previousBlockHash
    status
    commitTime
    _owner
    transactions {
      _id
      hash
      redactedHash
      signature
      version
      submissionTime
      mutations
      _owner
    }
  }
}
    `;
var _blocks__listDocument = gql`
    query _blocks__list($order: [Vendia_Block_OrderInput_!], $filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_BlockItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    nextToken
    Vendia_BlockItems {
      _id
      blockSchemaVersion
      blockId
      redactedBlockHash
      previousBlockId
      previousRedactedBlockHash
      blockHash
      previousBlockHash
      status
      commitTime
      _owner
      transactions {
        _id
        hash
        redactedHash
        signature
        version
        submissionTime
        mutations
        _owner
      }
    }
  }
}
    `;
var _blocks__onAddDocument = gql`
    subscription _blocks__onAdd {
  onAddVendia_Block {
    ...Vendia_Block_Result_Fragment
  }
}
    ${Vendia_Block_Result_FragmentFragmentDoc}`;
var _contracts__getDocument = gql`
    query _contracts__get($id: ID!, $version: Int) {
  getVendia_Contract(id: $id, version: $version) {
    ... on Vendia_Contract {
      description
      revisionId
      _acl {
        path
        operations
        principal {
          nodes
        }
      }
      _id
      _owner
      inputQuery
      name
      outputMutation
      resource {
        uri
        csp
        metadata {
          name
          value
        }
      }
    }
    ... on Vendia_Contract_Partial_ {
      __alias__name: name
      description
      _acl {
        path
        operations
        principal {
          nodes
        }
      }
      _id
      _owner
      inputQuery
      __alias__outputMutation: outputMutation
      __alias__resource: resource {
        uri
        csp
        metadata {
          name
          value
        }
      }
      revisionId
    }
  }
}
    `;
var _contracts__listDocument = gql`
    query _contracts__list($limit: Int, $nextToken: String, $order: [Vendia_Contract_OrderInput_!], $filter: Vendia_Contract_FilterInput_) {
  listVendia_ContractItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_ContractItems {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
    nextToken
  }
}
    `;
var _contracts__listVersionsDocument = gql`
    query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _contracts__addDocument = gql`
    mutation _contracts__add($aclInput: Vendia_Acls_Input_, $input: Vendia_Contract_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
  }
}
    `;
var _contracts__updateDocument = gql`
    mutation _contracts__update($id: ID!, $aclInput: Vendia_Acls_Input_, $condition: Vendia_Contract_ConditionInput_, $input: Vendia_Contract_UpdateInput_ = {}, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  updateVendia_Contract(
    input: $input
    aclInput: $aclInput
    condition: $condition
    id: $id
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          operations
          path
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
  }
}
    `;
var _contracts__invokeDocument = gql`
    mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {
  invokeVendia_Contract(
    id: $id
    input: $input
    revisionId: $revisionId
    syncMode: ASYNC
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _contracts__removeDocument = gql`
    mutation _contracts__remove($id: ID!, $condition: Vendia_Contract_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _deployments__getDocument = gql`
    query _deployments__get($id: ID!) {
  getVendia_DeploymentInfo(id: $id) {
    _id
    deploymentTime
    consensusDefinitionHash
    versionTag
    _owner
  }
}
    `;
var _deployments__listDocument = gql`
    query _deployments__list($order: [Vendia_DeploymentInfo_OrderInput_!], $filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {
  listVendia_DeploymentInfoItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_DeploymentInfoItems {
      _id
      deploymentTime
      consensusDefinitionHash
      versionTag
      _owner
    }
    nextToken
  }
}
    `;
var _files__getDocument = gql`
    query _files__get($id: ID!, $version: Int) {
  getVendia_File(id: $id, version: $version) {
    _id
    sourceBucket
    sourceKey
    sourceRegion
    sourceVersion
    destinationKey
    copyStrategy
    read
    write
    etag
    createdTime
    updatedTime
    temporaryUrl
    fileVersion
    _owner
  }
}
    `;
var _files__listDocument = gql`
    query _files__list($order: [Vendia_File_OrderInput_!], $filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FileItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    nextToken
    Vendia_FileItems {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__listVersionsDocument = gql`
    query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _files__addDocument = gql`
    mutation _files__add($input: Vendia_File_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  addVendia_File(input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__updateDocument = gql`
    mutation _files__update($id: ID!, $condition: Vendia_File_ConditionInput_, $input: Vendia_File_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  updateVendia_File(
    id: $id
    input: $input
    condition: $condition
    syncMode: $syncMode
  ) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }
}
    `;
var _files__removeDocument = gql`
    mutation _files__remove($condition: Vendia_File_ConditionInput_, $id: ID!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _files__onAddDocument = gql`
    subscription _files__onAdd {
  onAddVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _files__onRemoveDocument = gql`
    subscription _files__onRemove {
  onRemoveVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _files__onUpdateDocument = gql`
    subscription _files__onUpdate {
  onUpdateVendia_File {
    ...Vendia_File_Result_Fragment
  }
}
    ${Vendia_File_Result_FragmentFragmentDoc}`;
var _folders__getDocument = gql`
    query _folders__get($id: ID!, $version: Int) {
  getVendia_Folder(id: $id, version: $version) {
    _id
    name
    parent
    read
    write
    copyStrategy
    createdTime
    updatedTime
    _owner
  }
}
    `;
var _folders__listDocument = gql`
    query _folders__list($order: [Vendia_Folder_OrderInput_!], $filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {
  listVendia_FolderItems(
    order: $order
    filter: $filter
    limit: $limit
    nextToken: $nextToken
  ) {
    Vendia_FolderItems {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
    nextToken
  }
}
    `;
var _folders__listVersionsDocument = gql`
    query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {
  listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {
    nextToken
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
  }
}
    `;
var _folders__addDocument = gql`
    mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  addVendia_Folder(input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
  }
}
    `;
var _folders__removeDocument = gql`
    mutation _folders__remove($id: ID!, $condition: Vendia_Folder_ConditionInput_, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
  }
}
    `;
var _folders__onAddDocument = gql`
    subscription _folders__onAdd {
  onAddVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _folders__onRemoveDocument = gql`
    subscription _folders__onRemove {
  onRemoveVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _folders__onUpdateDocument = gql`
    subscription _folders__onUpdate {
  onUpdateVendia_Folder {
    ...Vendia_Folder_Result_Fragment
  }
}
    ${Vendia_Folder_Result_FragmentFragmentDoc}`;
var _settings__getDocument = gql`
    query _settings__get($version: Int) {
  getVendia_Settings(version: $version) {
    blockReportWebhooks
    blockReportEmails
    deadLetterWebhooks
    deadLetterEmails
    azure {
      defaultSubscriptionId
      defaultTenantId
    }
    resourceMapKeys
    resourceMapValues
    apiSettings {
      apiKeys {
        value
        usagePlan {
          quotaSettings {
            limit
            offset
            period
          }
          throttleSettings {
            burstLimit
            rateLimit
          }
        }
      }
      auth {
        authorizerType
        authorizerArn
        allowedAccounts
      }
    }
    _owner
    aws {
      blockReportSQSQueues
      blockReportLambdas
      blockReportFirehoses
      deadLetterSQSQueues
      deadLetterLambdas
      s3ReadAccounts
      dataDogMonitoring {
        ddExternalId
        ddApiKey
        ddLogEndpoint
        ddSendLogs
      }
    }
  }
}
    `;
var _settings__listVersionsDocument = gql`
    query _settings__listVersions($limit: Int, $nextToken: String) {
  listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {
    versions {
      ordinal
      block
      transactions {
        _id
        _owner
        submissionTime
      }
    }
    nextToken
  }
}
    `;
var _settings__updateDocument = gql`
    mutation _settings__update($condition: Vendia_Settings_ConditionInput_, $input: Vendia_Settings_UpdateInput_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
  updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {
    transaction {
      _id
      transactionId
      version
      submissionTime
      _owner
    }
    result {
      blockReportWebhooks
      blockReportEmails
      deadLetterWebhooks
      deadLetterEmails
      azure {
        blockReportFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        blockReportQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        deadLetterFunctions {
          resourceGroupName
          functionAppName
          functionName
        }
        deadLetterQueues {
          resourceGroupName
          storageAccountName
          queueName
        }
        defaultSubscriptionId
        defaultTenantId
      }
      resourceMapKeys
      resourceMapValues
      apiSettings {
        apiKeys {
          value
          usagePlan {
            quotaSettings {
              limit
              offset
              period
            }
            throttleSettings {
              burstLimit
              rateLimit
            }
          }
        }
      }
      _owner
      aws {
        blockReportSQSQueues
        blockReportLambdas
        blockReportFirehoses
        deadLetterSQSQueues
        deadLetterLambdas
        s3ReadAccounts
        dataDogMonitoring {
          ddExternalId
          ddApiKey
          ddLogEndpoint
          ddSendLogs
        }
      }
    }
  }
}
    `;
var _uniInfo__getDocument = gql`
    query _uniInfo__get {
  getVendia_UniInfo {
    name
    sku
    schema
    schemaNamespace
    status
    createdTime
    updatedTime
    localNodeName
    _owner
    nodes {
      name
      userId
      userEmail
      description
      status
      csp
      region
      bucketName
      temporaryCredentials {
        uploadFile {
          accessKeyId
          expiration
          secretAccessKey
          sessionToken
        }
      }
      tier {
        share
      }
      vendiaAccount {
        csp
        accountId
        userId
        org
      }
    }
  }
}
    `;
var defaultWrapper = (action, _operationName) => action();
function getEntities({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {};
}
function getBlocks({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_blocks__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Block);
      }, "getVendia_Block");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_blocks__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = { ...res.listVendia_BlockItems, items: (_a = res.listVendia_BlockItems) == null ? void 0 : _a.Vendia_BlockItems };
          delete updatedRes.Vendia_BlockItems;
          return updatedRes;
        });
      }, "listVendia_BlockItems");
    },
    onAdd(handler) {
      return _subscribe({ query: _blocks__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_Block);
      });
    }
  };
}
function getContracts({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Contract);
      }, "getVendia_Contract");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = { ...res.listVendia_ContractItems, items: (_a = res.listVendia_ContractItems) == null ? void 0 : _a.Vendia_ContractItems };
          delete updatedRes.Vendia_ContractItems;
          return updatedRes;
        });
      }, "listVendia_ContractItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_ContractVersions);
      }, "listVendia_ContractVersions");
    },
    add(input, options) {
      const variables = { ...options, input };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Contract);
      }, "addVendia_Contract");
    },
    update(input, options) {
      const { _id, ...rest } = input;
      const variables = { ...options, id: _id, input: rest };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Contract);
      }, "updateVendia_Contract");
    },
    invoke(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__invokeDocument, variables, wrappedRequestHeaders).then((res) => res.invokeVendia_Contract);
      }, "invokeVendia_Contract");
    },
    remove(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_contracts__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Contract);
      }, "removeVendia_Contract");
    }
  };
}
function getFiles({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_File);
      }, "getVendia_File");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = { ...res.listVendia_FileItems, items: (_a = res.listVendia_FileItems) == null ? void 0 : _a.Vendia_FileItems };
          delete updatedRes.Vendia_FileItems;
          return updatedRes;
        });
      }, "listVendia_FileItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FileVersions);
      }, "listVendia_FileVersions");
    },
    add(input, options) {
      const variables = { ...options, input };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_File);
      }, "addVendia_File");
    },
    update(input, options) {
      const { _id, ...rest } = input;
      const variables = { ...options, id: _id, input: rest };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_File);
      }, "updateVendia_File");
    },
    remove(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_files__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_File);
      }, "removeVendia_File");
    },
    onAdd(handler) {
      return _subscribe({ query: _files__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_File);
      });
    },
    onRemove(handler) {
      return _subscribe({ query: _files__onRemoveDocument }, ({ data }) => {
        return handler(data.onRemoveVendia_File);
      });
    },
    onUpdate(handler) {
      return _subscribe({ query: _files__onUpdateDocument }, ({ data }) => {
        return handler(data.onUpdateVendia_File);
      });
    }
  };
}
function getFolders({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Folder);
      }, "getVendia_Folder");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = { ...res.listVendia_FolderItems, items: (_a = res.listVendia_FolderItems) == null ? void 0 : _a.Vendia_FolderItems };
          delete updatedRes.Vendia_FolderItems;
          return updatedRes;
        });
      }, "listVendia_FolderItems");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_FolderVersions);
      }, "listVendia_FolderVersions");
    },
    add(input, options) {
      const variables = { ...options, input };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__addDocument, variables, wrappedRequestHeaders).then((res) => res.addVendia_Folder);
      }, "addVendia_Folder");
    },
    remove(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_folders__removeDocument, variables, wrappedRequestHeaders).then((res) => res.removeVendia_Folder);
      }, "removeVendia_Folder");
    },
    onAdd(handler) {
      return _subscribe({ query: _folders__onAddDocument }, ({ data }) => {
        return handler(data.onAddVendia_Folder);
      });
    },
    onRemove(handler) {
      return _subscribe({ query: _folders__onRemoveDocument }, ({ data }) => {
        return handler(data.onRemoveVendia_Folder);
      });
    },
    onUpdate(handler) {
      return _subscribe({ query: _folders__onUpdateDocument }, ({ data }) => {
        return handler(data.onUpdateVendia_Folder);
      });
    }
  };
}
function getDeployments({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(id, options) {
      const variables = { ...options, id };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_deployments__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_DeploymentInfo);
      }, "getVendia_DeploymentInfo");
    },
    list(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_deployments__listDocument, variables, wrappedRequestHeaders).then((res) => {
          var _a;
          const updatedRes = { ...res.listVendia_DeploymentInfoItems, items: (_a = res.listVendia_DeploymentInfoItems) == null ? void 0 : _a.Vendia_DeploymentInfoItems };
          delete updatedRes.Vendia_DeploymentInfoItems;
          return updatedRes;
        });
      }, "listVendia_DeploymentInfoItems");
    }
  };
}
function getSettings({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_Settings);
      }, "getVendia_Settings");
    },
    listVersions(options) {
      const variables = options;
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__listVersionsDocument, variables, wrappedRequestHeaders).then((res) => res.listVendia_SettingsVersions);
      }, "listVendia_SettingsVersions");
    },
    update(input, options) {
      const variables = { ...options, input };
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_settings__updateDocument, variables, wrappedRequestHeaders).then((res) => res.updateVendia_Settings);
      }, "updateVendia_Settings");
    }
  };
}
function getUniInfo({ _gqlClient, _subscribe, _requestWrapper = defaultWrapper }) {
  return {
    get() {
      const variables = {};
      return _requestWrapper((wrappedRequestHeaders) => {
        return _gqlClient.request(_uniInfo__getDocument, variables, wrappedRequestHeaders).then((res) => res.getVendia_UniInfo);
      }, "getVendia_UniInfo");
    }
  };
}

// ../../.vendia-client/index.ts
var createVendiaClient = (options) => {
  const _logger = debug("@vendia/client");
  if (options.debug) {
    _logger("Debug enabled via options");
    debug.enable("@vendia/client");
  }
  const { _subscribe } = createSubscriptionClient(options, { _logger });
  const { _gqlClient, _requestWrapper, request } = createCoreClient(options, { _logger });
  const getSdkOptions = { _gqlClient, _requestWrapper, _subscribe };
  const blocks = getBlocks(getSdkOptions);
  const contracts = getContracts(getSdkOptions);
  const deployments = getDeployments(getSdkOptions);
  const entities = getEntities(getSdkOptions);
  const uniInfo = getUniInfo(getSdkOptions);
  const settings = getSettings(getSdkOptions);
  const folders = getFolders(getSdkOptions);
  const files = getFiles(getSdkOptions);
  const storage = {
    files,
    folders
  };
  return {
    request,
    deployments,
    blocks,
    storage,
    contracts,
    uniInfo,
    settings,
    entities
  };
};
export {
  createVendiaClient
};
