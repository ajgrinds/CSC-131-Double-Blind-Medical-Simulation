var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { oldVisit } from '@graphql-codegen/plugin-helpers';
import { concatAST, Kind } from 'graphql';
import { GraphQLRequestVisitor } from './visitor';
import { extname } from 'path';
export const plugin = (schema, documents, config) => {
    // @ts-ignore - document doesn't exist on v? This code is from graphql-code-generator so let's ignore for now
    const allAst = concatAST(documents.map((v) => v.document));
    const allFragments = [
        ...allAst.definitions.filter((d) => d.kind === Kind.FRAGMENT_DEFINITION).map((fragmentDef) => ({
            node: fragmentDef,
            name: fragmentDef.name.value,
            onType: fragmentDef.typeCondition.name.value,
            isExternal: false,
        })),
        ...(config.externalFragments || []),
    ];
    const visitor = new GraphQLRequestVisitor(schema, allFragments, config);
    const visitorResult = oldVisit(allAst, { leave: visitor });
    return {
        prepend: visitor.getImports(),
        content: [
            visitor.fragments,
            ...visitorResult.definitions.filter((t) => typeof t === 'string'),
            visitor.sdkContent,
        ].join('\n'),
    };
};
export const validate = (schema, documents, config, outputFile) => __awaiter(void 0, void 0, void 0, function* () {
    if (extname(outputFile) !== '.ts') {
        throw new Error(`Plugin "typescript-graphql-request" requires extension to be ".ts"!`);
    }
});
export { GraphQLRequestVisitor };
