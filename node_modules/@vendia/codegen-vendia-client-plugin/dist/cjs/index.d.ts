import { PluginFunction, PluginValidateFn } from '@graphql-codegen/plugin-helpers';
import { RawClientSideBasePluginConfig, ClientSideBaseVisitor, LoadedFragment, ClientSideBasePluginConfig } from '@graphql-codegen/visitor-plugin-common';
import { GraphQLSchema, OperationDefinitionNode } from 'graphql';

/**
 * @description This plugin generates [`graphql-request`](https://npmjs.com/package/graphql-request) ready-to-use SDK, which is fully-typed.
 */
interface RawGraphQLRequestPluginConfig extends RawClientSideBasePluginConfig {
    /**
     * @description By default, the `request` method return the `data` or `errors` key from the response. If you need to access the `extensions` key you can use the `rawRequest` method.
     * @default false
     *
     * @exampleMarkdown
     * ```yml
     * generates:
     *   path/to/file.ts:
     *     plugins:
     *       - typescript
     *       - typescript-operations
     *       - typescript-graphql-request
     *     config:
     *       rawRequest: true
     * ```
     */
    rawRequest?: boolean;
    /**
     * @description Allows you to override the type for extensions when `rawRequest` is enabled.
     * @default any
     *
     * @exampleMarkdown
     * ```yml
     * config:
     *   rawRequest: true
     *   extensionsType: unknown
     * ```
     */
    extensionsType?: string;
    schemaNamespace?: string;
    schemaJson?: Record<string, unknown>;
}

interface GraphQLRequestPluginConfig extends ClientSideBasePluginConfig {
    rawRequest: boolean;
    extensionsType: string;
    schemaNamespace: string;
    schemaJson: Record<string, unknown>;
}
declare class GraphQLRequestVisitor extends ClientSideBaseVisitor<RawGraphQLRequestPluginConfig, GraphQLRequestPluginConfig> {
    private _operationsToInclude;
    constructor(schema: GraphQLSchema, fragments: LoadedFragment[], rawConfig: RawGraphQLRequestPluginConfig);
    OperationDefinition(node: OperationDefinitionNode): string;
    protected buildOperation(node: OperationDefinitionNode, documentVariableName: string, operationType: string, operationResultType: string, operationVariablesTypes: string): string;
    private getDocumentNodeVariable;
    get sdkContent(): string;
}

declare const plugin: PluginFunction<RawGraphQLRequestPluginConfig>;
declare const validate: PluginValidateFn<any>;

export { GraphQLRequestVisitor, plugin, validate };
