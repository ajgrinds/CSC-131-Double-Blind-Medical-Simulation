var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { build, defineConfig } from 'tsup';
export const compileTs = (entry, version, options) => __awaiter(void 0, void 0, void 0, function* () {
    // Use 'tsup' to compile typescript to js/dts files
    // Note: had a lot of trouble getting d.ts generation to succeed...
    //  Needed to add a tsconfig.json file to the installed @vendia/client -
    //  tsup detects it and this changes dts generation somehow.
    // Note: do NOT add the "clean" option below - spend an hour trying to debug weird build failures. We're building a twice - something goes awry.
    const config = defineConfig(Object.assign({ 
        // This was needed to prevent weird errors with 2 versions of graphql, hopefully won't be needed in the future
        // external: ['graphql'],
        // Consistent file output for esm/cjs - otherwise will look at user's project's package.json file for type:module
        // and change the naming of the output files. More here - https://tsup.egoist.sh/#bundle-formats
        legacyOutput: true, entryPoints: [entry], silent: !process.env.VENDIA_DEBUG, config: false, esbuildOptions(options) {
            if (options && options.define) {
                options.define['PACKAGE_VERSION'] = `"${version}"`;
            }
        } }, options));
    // console.log('compileTs config', config)
    yield build(config);
});
