export const operations = `
  query _blocks__get($id: ID!) {
    getVendia_Block(id: $id) {
      _id
      blockSchemaVersion
      blockId
      redactedBlockHash
      previousBlockId
      previousRedactedBlockHash
      blockHash
      previousBlockHash
      status
      commitTime
      _owner
      transactions {
        _id
        hash
        redactedHash
        signature
        version
        submissionTime
        mutations
        _owner
      }
    }
  }

  query _blocks__list($order: [Vendia_Block_OrderInput_!], $filter: Vendia_Block_FilterInput_, $limit: Int, $nextToken: String) {
    listVendia_BlockItems(order: $order, filter: $filter, limit: $limit, nextToken: $nextToken) {
      nextToken
      Vendia_BlockItems {
        _id
        blockSchemaVersion
        blockId
        redactedBlockHash
        previousBlockId
        previousRedactedBlockHash
        blockHash
        previousBlockHash
        status
        commitTime
        _owner
        transactions {
          _id
          hash
          redactedHash
          signature
          version
          submissionTime
          mutations
          _owner
        }
      }
    }
  }

  subscription _blocks__onAdd {
    onAddVendia_Block {
      ...Vendia_Block_Result_Fragment
    }
  }

  fragment Vendia_Block_Result_Fragment on Vendia_Block_Result_ {
    error
    result {
      _id
      blockSchemaVersion
      blockId
      redactedBlockHash
      previousBlockId
      previousRedactedBlockHash
      blockHash
      previousBlockHash
      status
      commitTime
      _owner
      transactions {
        _id
        hash
        redactedHash
        signature
        version
        submissionTime
        mutations
        _owner
      }
    }
  }

  query _contracts__get($id: ID!, $version: Int) {
    getVendia_Contract(id: $id, version: $version) {
      ... on Vendia_Contract {
        description
        revisionId
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        name
        outputMutation
        resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
      }
      ... on Vendia_Contract_Partial_ {
        __alias__name: name
        description
        _acl {
          path
          operations
          principal {
            nodes
          }
        }
        _id
        _owner
        inputQuery
        __alias__outputMutation: outputMutation
        __alias__resource: resource {
          uri
          csp
          metadata {
            name
            value
          }
        }
        revisionId
      }
    }
  }

  query _contracts__list($limit: Int, $nextToken: String, $order: [Vendia_Contract_OrderInput_!], $filter: Vendia_Contract_FilterInput_) {
    listVendia_ContractItems(order: $order, filter: $filter, limit: $limit, nextToken: $nextToken) {
      Vendia_ContractItems {
        ... on Vendia_Contract {
          description
          revisionId
          _acl {
            path
            operations
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          name
          outputMutation
          resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
        }
        ... on Vendia_Contract_Partial_ {
          __alias__name: name
          description
          _acl {
            path
            operations
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          __alias__outputMutation: outputMutation
          __alias__resource: resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
          revisionId
        }
      }
      nextToken
    }
  }

  query _contracts__listVersions($id: ID!, $limit: Int, $nextToken: String) {
    listVendia_ContractVersions(id: $id, limit: $limit, nextToken: $nextToken) {
      nextToken
      versions {
        ordinal
        block
        transactions {
          _id
          _owner
          submissionTime
        }
      }
    }
  }

  mutation _contracts__add(
    $aclInput: Vendia_Acls_Input_
    $input: Vendia_Contract_Input_!
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    addVendia_Contract(aclInput: $aclInput, input: $input, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        ... on Vendia_Contract {
          description
          revisionId
          _acl {
            operations
            path
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          name
          outputMutation
          resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
        }
        ... on Vendia_Contract_Partial_ {
          __alias__name: name
          description
          _acl {
            path
            operations
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          __alias__outputMutation: outputMutation
          __alias__resource: resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
          revisionId
        }
      }
    }
  }

  mutation _contracts__update(
    $id: ID!
    $aclInput: Vendia_Acls_Input_
    $condition: Vendia_Contract_ConditionInput_
    $input: Vendia_Contract_UpdateInput_ = {}
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    updateVendia_Contract(input: $input, aclInput: $aclInput, condition: $condition, id: $id, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        ... on Vendia_Contract {
          description
          revisionId
          _acl {
            operations
            path
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          name
          outputMutation
          resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
        }
        ... on Vendia_Contract_Partial_ {
          __alias__name: name
          description
          _acl {
            path
            operations
            principal {
              nodes
            }
          }
          _id
          _owner
          inputQuery
          __alias__outputMutation: outputMutation
          __alias__resource: resource {
            uri
            csp
            metadata {
              name
              value
            }
          }
          revisionId
        }
      }
    }
  }

  mutation _contracts__invoke($input: Vendia_Contract_InvokeInput_, $revisionId: String, $id: ID!) {
    invokeVendia_Contract(id: $id, input: $input, revisionId: $revisionId, syncMode: ASYNC) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
    }
  }

  mutation _contracts__remove(
    $id: ID!
    $condition: Vendia_Contract_ConditionInput_
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    removeVendia_Contract(id: $id, condition: $condition, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
    }
  }

  query _deployments__get($id: ID!) {
    getVendia_DeploymentInfo(id: $id) {
      _id
      deploymentTime
      consensusDefinitionHash
      versionTag
      _owner
    }
  }

  query _deployments__list($order: [Vendia_DeploymentInfo_OrderInput_!], $filter: Vendia_DeploymentInfo_FilterInput_, $nextToken: String, $limit: Int) {
    listVendia_DeploymentInfoItems(order: $order, filter: $filter, limit: $limit, nextToken: $nextToken) {
      Vendia_DeploymentInfoItems {
        _id
        deploymentTime
        consensusDefinitionHash
        versionTag
        _owner
      }
      nextToken
    }
  }

  query _files__get($id: ID!, $version: Int) {
    getVendia_File(id: $id, version: $version) {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }

  query _files__list($order: [Vendia_File_OrderInput_!], $filter: Vendia_File_FilterInput_, $limit: Int, $nextToken: String) {
    listVendia_FileItems(order: $order, filter: $filter, limit: $limit, nextToken: $nextToken) {
      nextToken
      Vendia_FileItems {
        _id
        sourceBucket
        sourceKey
        sourceRegion
        sourceVersion
        destinationKey
        copyStrategy
        read
        write
        etag
        createdTime
        updatedTime
        temporaryUrl
        fileVersion
        _owner
      }
    }
  }

  query _files__listVersions($id: ID!, $limit: Int, $nextToken: String) {
    listVendia_FileVersions(id: $id, limit: $limit, nextToken: $nextToken) {
      nextToken
      versions {
        ordinal
        block
        transactions {
          _id
          _owner
          submissionTime
        }
      }
    }
  }

  mutation _files__add($input: Vendia_File_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
    addVendia_File(input: $input, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        _id
        sourceBucket
        sourceKey
        sourceRegion
        sourceVersion
        destinationKey
        copyStrategy
        read
        write
        etag
        createdTime
        updatedTime
        temporaryUrl
        fileVersion
        _owner
      }
    }
  }

  mutation _files__update(
    $id: ID!
    $condition: Vendia_File_ConditionInput_
    $input: Vendia_File_UpdateInput_!
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    updateVendia_File(id: $id, input: $input, condition: $condition, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        _id
        sourceBucket
        sourceKey
        sourceRegion
        sourceVersion
        destinationKey
        copyStrategy
        read
        write
        etag
        createdTime
        updatedTime
        temporaryUrl
        fileVersion
        _owner
      }
    }
  }

  mutation _files__remove(
    $condition: Vendia_File_ConditionInput_
    $id: ID!
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    removeVendia_File(id: $id, condition: $condition, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
    }
  }

  subscription _files__onAdd {
    onAddVendia_File {
      ...Vendia_File_Result_Fragment
    }
  }

  subscription _files__onRemove {
    onRemoveVendia_File {
      ...Vendia_File_Result_Fragment
    }
  }

  subscription _files__onUpdate {
    onUpdateVendia_File {
      ...Vendia_File_Result_Fragment
    }
  }

  fragment Vendia_File_Result_Fragment on Vendia_File_Result_ {
    error
    result {
      _id
      sourceBucket
      sourceKey
      sourceRegion
      sourceVersion
      destinationKey
      copyStrategy
      read
      write
      etag
      createdTime
      updatedTime
      temporaryUrl
      fileVersion
      _owner
    }
  }

  query _folders__get($id: ID!, $version: Int) {
    getVendia_Folder(id: $id, version: $version) {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
  }

  query _folders__list($order: [Vendia_Folder_OrderInput_!], $filter: Vendia_Folder_FilterInput_, $limit: Int, $nextToken: String) {
    listVendia_FolderItems(order: $order, filter: $filter, limit: $limit, nextToken: $nextToken) {
      Vendia_FolderItems {
        _id
        name
        parent
        read
        write
        copyStrategy
        createdTime
        updatedTime
        _owner
      }
      nextToken
    }
  }

  query _folders__listVersions($id: ID!, $limit: Int, $nextToken: String) {
    listVendia_FolderVersions(id: $id, limit: $limit, nextToken: $nextToken) {
      nextToken
      versions {
        ordinal
        block
        transactions {
          _id
          _owner
          submissionTime
        }
      }
    }
  }

  mutation _folders__add($input: Vendia_Folder_Input_!, $syncMode: Vendia_SyncMode = NODE_COMMITTED) {
    addVendia_Folder(input: $input, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        _id
        name
        parent
        read
        write
        copyStrategy
        createdTime
        updatedTime
        _owner
      }
    }
  }

  mutation _folders__remove(
    $id: ID!
    $condition: Vendia_Folder_ConditionInput_
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    removeVendia_Folder(id: $id, condition: $condition, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
    }
  }

  subscription _folders__onAdd {
    onAddVendia_Folder {
      ...Vendia_Folder_Result_Fragment
    }
  }

  subscription _folders__onRemove {
    onRemoveVendia_Folder {
      ...Vendia_Folder_Result_Fragment
    }
  }

  subscription _folders__onUpdate {
    onUpdateVendia_Folder {
      ...Vendia_Folder_Result_Fragment
    }
  }

  fragment Vendia_Folder_Result_Fragment on Vendia_Folder_Result_ {
    error
    result {
      _id
      name
      parent
      read
      write
      copyStrategy
      createdTime
      updatedTime
      _owner
    }
  }

  query _settings__get($version: Int) {
    getVendia_Settings(version: $version) {
      blockReportWebhooks
      blockReportEmails
      deadLetterWebhooks
      deadLetterEmails
      azure {
        defaultSubscriptionId
        defaultTenantId
      }
      resourceMapKeys
      resourceMapValues
      apiSettings {
        apiKeys {
          value
          usagePlan {
            quotaSettings {
              limit
              offset
              period
            }
            throttleSettings {
              burstLimit
              rateLimit
            }
          }
        }
        auth {
          authorizerType
          authorizerArn
          allowedAccounts
        }
      }
      _owner
      aws {
        blockReportSQSQueues
        blockReportLambdas
        blockReportFirehoses
        deadLetterSQSQueues
        deadLetterLambdas
        s3ReadAccounts
        dataDogMonitoring {
          ddExternalId
          ddApiKey
          ddLogEndpoint
          ddSendLogs
        }
      }
    }
  }

  query _settings__listVersions($limit: Int, $nextToken: String) {
    listVendia_SettingsVersions(limit: $limit, nextToken: $nextToken) {
      versions {
        ordinal
        block
        transactions {
          _id
          _owner
          submissionTime
        }
      }
      nextToken
    }
  }

  mutation _settings__update(
    $condition: Vendia_Settings_ConditionInput_
    $input: Vendia_Settings_UpdateInput_!
    $syncMode: Vendia_SyncMode = NODE_COMMITTED
  ) {
    updateVendia_Settings(condition: $condition, input: $input, syncMode: $syncMode) {
      transaction {
        _id
        transactionId
        version
        submissionTime
        _owner
      }
      result {
        blockReportWebhooks
        blockReportEmails
        deadLetterWebhooks
        deadLetterEmails
        azure {
          blockReportFunctions {
            resourceGroupName
            functionAppName
            functionName
          }
          blockReportQueues {
            resourceGroupName
            storageAccountName
            queueName
          }
          deadLetterFunctions {
            resourceGroupName
            functionAppName
            functionName
          }
          deadLetterQueues {
            resourceGroupName
            storageAccountName
            queueName
          }
          defaultSubscriptionId
          defaultTenantId
        }
        resourceMapKeys
        resourceMapValues
        apiSettings {
          apiKeys {
            value
            usagePlan {
              quotaSettings {
                limit
                offset
                period
              }
              throttleSettings {
                burstLimit
                rateLimit
              }
            }
          }
        }
        _owner
        aws {
          blockReportSQSQueues
          blockReportLambdas
          blockReportFirehoses
          deadLetterSQSQueues
          deadLetterLambdas
          s3ReadAccounts
          dataDogMonitoring {
            ddExternalId
            ddApiKey
            ddLogEndpoint
            ddSendLogs
          }
        }
      }
    }
  }

  query _uniInfo__get {
    getVendia_UniInfo {
      name
      sku
      schema
      schemaNamespace
      status
      createdTime
      updatedTime
      localNodeName
      _owner
      nodes {
        name
        userId
        userEmail
        description
        status
        csp
        region
        bucketName
        temporaryCredentials {
          uploadFile {
            accessKeyId
            expiration
            secretAccessKey
            sessionToken
          }
        }
        tier {
          share
        }
        vendiaAccount {
          csp
          accountId
          userId
          org
        }
      }
    }
  }
`;
export const introspectionQuery = `
query _vendia__introspection {
  __schema {
    queryType { name }
    mutationType { name }
    subscriptionType { name }
    types {
      ...FullType
    }
    directives {
      name
      description
      locations
      args {
        ...InputValue
      }
    }
  }
}

fragment FullType on __Type {
  kind
  name
  description
  fields(includeDeprecated: true) {
    name
    description
    args {
      ...InputValue
    }
    type {
      ...TypeRef
    }
    isDeprecated
    deprecationReason
  }
  inputFields {
    ...InputValue
  }
  interfaces {
    ...TypeRef
  }
  enumValues(includeDeprecated: true) {
    name
    description
    isDeprecated
    deprecationReason
  }
  possibleTypes {
    ...TypeRef
  }
}

fragment InputValue on __InputValue {
  name
  description
  type { ...TypeRef }
  defaultValue
}

fragment TypeRef on __Type {
  kind
  name
  ofType {
    kind
    name
    ofType {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
              }
            }
          }
        }
      }
    }
  }
}
`;
